#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 4735 0 17 3 24 #"; EECS 345 Class Project"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; James Hochadel and Andrew Marmorstein"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; This code was restructured using solution2.scm from Blackboard to "
 #"better abstract certain"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #"; functions and generally clean up Mstate."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"classParser.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Interpret a file containing Java-like code."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; Setup:"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; 1. Create initial-return, which accepts a statement and the enviro"
 #"nment from which the return"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";    was called, evaluates the statement, and returns the result."
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; 2. Create outer-environment, which contains all class definitions."
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; 3. Create begin-interpret, a function that calls the main method i"
 #"n class classname."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #"; Execution: Run begin-interpret. Pass it outer-environment with an "
 #"empty layer for main's local"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; variable and function definitions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 24 3 1 #" "
0 0 14 3 9 #"classname"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 14 #"initial-return"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 7 #"operand"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-break"
0 0 24 3 1 #" "
0 0 15 3 16 #"default-continue"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 17 #"outer-environment"
0 0 24 3 2 #" ("
0 0 14 3 17 #"interpret-classes"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 24 3 1 #" "
0 0 14 3 8 #"filename"
0 0 24 3 2 #") "
0 0 14 3 11 #"initial-env"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 15 3 13 #"default-break"
0 0 24 3 1 #" "
0 0 15 3 16 #"default-continue"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 15 #"begin-interpret"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 14 #"Mvalue-funcall"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mainFuncall"
0 0 24 3 1 #" "
0 0 14 3 4 #"main"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 14 #"initial-return"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-break"
0 0 24 3 1 #" "
0 0 15 3 16 #"default-continue"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 97
(
 #"; Begin interpreting. Pass in the environment, which is built by int"
 #"erpreting the outermost layer"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 70
(
 #"; of the program, containing function and global variable definition"
 #"s."
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 15 #"begin-interpret"
0 0 24 3 2 #" ("
0 0 14 3 31 #"getFunctionExecutionEnvironment"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mainFuncall"
0 0 24 3 1 #" "
0 0 14 3 4 #"main"
0 0 24 3 2 #") "
0 0 14 3 17 #"outer-environment"
0 0 24 3 1 #" "
0 0 14 3 14 #"initial-return"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-break"
0 0 24 3 1 #" "
0 0 15 3 16 #"default-continue"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-throw"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 7 #"funcall"
0 0 24 3 1 #" "
0 0 14 3 4 #"main"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"mainFuncall"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Recursively evaluate all class definitions in the statement list."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"interpret-classes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"interpret-classes"
0 0 24 3 2 #" ("
0 0 14 3 17 #"restOfExpressions"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 12 #"Mclass-state"
0 0 24 3 2 #" ("
0 0 14 3 15 #"firstExpression"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; do-interpret recursively evaluates statements and modifies the sta"
 #"te appropriately"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #"; based on their contents."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"do-interpret"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"do-interpret"
0 0 24 3 2 #" ("
0 0 14 3 17 #"restOfExpressions"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"Mstate"
0 0 24 3 2 #" ("
0 0 14 3 15 #"firstExpression"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #") ("
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-break"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"invalidBreak"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Break was called outside of a while loop\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 16 #"default-continue"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"invalidContinue"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"Continue was called outside of a while loop\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 13 #"default-throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"uncaughtException"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"An exception was thrown but not caught\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Mclass-state add a class from the given statement to the class env"
 #"ironment"
) 0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #"; the environment will have class and their defffenitions which incl"
 #"ude fields and functions/closures"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"Mclass-state"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"class-state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"has-super"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 9 #"className"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 12 #"do-interpret"
0 0 24 3 2 #" ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"initial-env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 6 #"(())) "
0 0 14 3 11 #"class-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 9 #"className"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 12 #"do-interpret"
0 0 24 3 2 #" ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"initial-env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-super"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 14 3 11 #"class-state"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"has-super"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"className"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"get-super"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"innerParens"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; Mstate modifies the state depending on the contents of statement, "
 #"then returns the state.."
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #"; TODO: Move while's continuation to Mstate-while"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"Mstate"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 3 #") ("
0 0 14 3 17 #"Mstate-assignment"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 3 #") ("
0 0 14 3 12 #"Mstate-begin"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"break"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 3 #") ("
0 0 14 3 14 #"Mstate-funcall"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"function"
0 0 24 3 3 #") ("
0 0 14 3 11 #"Mstate-func"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 15 #"static-function"
0 0 24 3 3 #") ("
0 0 14 3 18 #"Mstate-static-func"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #") ("
0 0 14 3 9 #"Mstate-if"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 9 #"exception"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"try"
0 0 24 3 3 #") ("
0 0 14 3 10 #"Mstate-tcf"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 10 #"Mstate-var"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"new-break"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"Mstate-while"
0 0 24 3 2 #" ("
0 0 14 3 21 #"parse-while-condition"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 21 #"parse-while-statement"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"unknown"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"Encountered an unknown statement\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"exception"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Mstate-assignment handles variable assignment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"Mstate-assignment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"replace_var"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 9 #"operation"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"; Whenever entering a block of code with curly braces, this function"
 #" should be called to evaluate"
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #"; the contents of the block inside a new layer of scope."
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Statement format:"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; (begin (stmt-1) (stmt-2) ...)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"Mstate-begin"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"getInnerScope"
0 0 24 3 2 #" ("
0 0 14 3 12 #"do-interpret"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 15 #"addLevelOfScope"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getInnerScope"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getInnerScope"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 5 #"throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Mstate-if handles if statements"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Statement format: (else-statement is optional)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; (if (condition) (statement) (else-statement))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"Mstate-if"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Mbool"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-condition"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"Mstate"
0 0 24 3 2 #" ("
0 0 14 3 12 #"if-statement"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"else-statement-exists"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"Mstate"
0 0 24 3 2 #" ("
0 0 14 3 14 #"else-statement"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"else-statement-exists"
0 0 24 3 1 #" "
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"if-condition"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"if-statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"else-statement"
0 0 24 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Mstate-func handles function declarations"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Statement format:"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; (function function-name (formal-param-1, formal-param-2, ...) (bod"
 #"y))"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"Mstate-func"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 13 #"stateContains"
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"redefining"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"function ~a has already been declared\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 13 #"createClosure"
0 0 24 3 2 #" ("
0 0 14 3 9 #"getParams"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 7 #"getBody"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"Mstate-static-func"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 13 #"stateContains"
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"redefining"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"function ~a has already been declared\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 13 #"createClosure"
0 0 24 3 2 #" ("
0 0 14 3 9 #"getParams"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 7 #"getBody"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 14 #"((()()))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 31 #";helper methods for Mstate-func"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"getParams"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; When a function is called without the calling line needing its ret"
 #"urn"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#"; value, execute the function and then return the environment."
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Statement format:"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; (funcall function-name actual-param-1 actual-param-2 ...)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"Mstate-funcall"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"funcall"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 14 #"Mvalue-funcall"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcall"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";helpers for Mstate-funcall"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"globalStateOfEnvironment"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"getFuncBody"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"getFuncEnvironment"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"getBody"
0 0 24 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Modify the state based on a try-catch-finally block."
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Statement format, where each \""
0 0 17 3 51 #"body\" can consist of multiple statements in a list:"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; (try (try-body) (catch (exception-name) (catch-body)) (finally (fi"
 #"nally-body)))"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"Mstate-tcf"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 18 #"catch-continuation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"finally-stmt"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 12 #"Mstate-begin"
0 0 24 3 2 #" ("
0 0 14 3 12 #"finally-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"try"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"new-throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 77
(
 #"; if this try block is accompanied by a catch block, pass a continua"
 #"tion that"
) 0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 87
(
 #"; jumps us to it when we encounter a throw. Otherwise, pass whatever"
 #" throw continuation"
) 0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 48 #"; we were passed when we entered this try block."
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"catch-block"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Mstate-begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"try-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 14 3 12 #"Mstate-begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"try-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 5 #"catch"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 14 3 11 #"catch-begin"
0 0 24 3 2 #" ("
0 0 14 3 10 #"catch-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 9 #"catch-err"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 8 #"; Call \""
0 0 17 3 41 #"try\" with catch as the catch-continuation"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"try"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 18 #"catch-continuation"
0 0 24 3 2 #" ("
0 0 15 3 5 #"catch"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; Same as Mstate-begin, but with the addition of inserting the excep"
 #"tion into the"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #"; environment before calling do-interpret."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"catch-begin"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 6 #"e-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"e-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"getInnerScope"
0 0 24 3 2 #" ("
0 0 14 3 12 #"do-interpret"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 6 #"insert"
0 0 24 3 1 #" "
0 0 14 3 6 #"e-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"e-value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"addLevelOfScope"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getInnerScope"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getInnerScope"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 5 #"throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"try-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"catch-body"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"catch-block"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"catch-err"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"finally-stmt"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"finally-body"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; MState-var handles variable declaration"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Statement format:"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; (var var-name) OR (var var-name value) OR (var var-name NEW Constr"
 #"uctor)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"Mstate-var"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 71
(
 #";((stateContains (variable statement) env) (error 'redefining (forma"
 #"t \""
) 0 0 17 3 8 #"Variable"
0 0 17 3 1 #" "
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 3 #"has"
0 0 17 3 1 #" "
0 0 17 3 7 #"already"
0 0 17 3 1 #" "
0 0 17 3 4 #"been"
0 0 17 3 1 #" "
0 0 17 3 33 #"declared\" (variable statement))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"thirdElement"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 9 #"undefined"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"unNestIfValue"
0 0 24 3 2 #" ("
0 0 14 3 12 #"thirdElement"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 6 #")))) ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 9 #"operation"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 13 #"get-class-env"
0 0 24 3 2 #" ("
0 0 14 3 10 #"class-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"isConstructor"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"caaddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"new"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-type"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cdaddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 2 #"de"
0 0 15 3 4 #"fine"
0 0 24 3 1 #" "
0 0 14 3 13 #"unNestIfValue"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";get-class-env will take a class and and environment and return the "
 #"closure for the object of that class"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";class will be the name of the class and env will be the environment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"get-class-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 19 #"no-parent-no-static"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"class-env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 20 #"has-parent-no-static"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"class-env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"get-class-env"
0 0 24 3 2 #" ("
0 0 14 3 20 #"get-parent-no-static"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 20 #"no-parent-has-static"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"class-env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"class-env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"get-class-env"
0 0 24 3 2 #" ("
0 0 14 3 21 #"get-parent-has-static"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"no-parent-no-static"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"has-parent-no-static"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"no-parent-has-static"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"class-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"get-parent-no-static"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"get-parent-has-static"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Mstate-while handles while loops"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; TODO: check that continue actually works"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Statement format:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (while (condition) (body))"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; body may be one line only; for multiple lines, it must contain a b"
 #"egin."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"Mstate-while"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Mbool"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"Mstate-while"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 9 #"statement"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"new-continue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"Mstate"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 5 #"break"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 8 #"continue"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"parse-while-condition"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"parse-while-statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Mvalue: Evaluate an expression to determine its value."
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Last params are return break continue throw. Shortened for brevity"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"Mvalue"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 17 3 9 #"; unary \""
0 0 17 3 2 #"-\""
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 3 #") ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 3 #") ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 3 #") ("
0 0 14 3 14 #"Mvalue-funcall"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dot"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 9 #"opperand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 24 3 2 #" ("
0 0 14 3 9 #"opperand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Mbool"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"operand"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 3 2 #") "
0 0 17 3 37 #"; TODO: Can this be moved / replaced?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";function for when the dot opperat"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; When a function is called, Mvalue-funcall does the following:"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; 1. Creates the function's execution environment using the environm"
 #"ent function stored"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";    in the function closure"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; 2. Binds the actual parameters to the formal parameters in the new"
 #" environment"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #"; 3. Evaluates the body of the function."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Differing"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; Execute a function and return the value produced by its return sta"
 #"tement."
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#"; TODO: Match env-contains-symbol? check from Mstate-funcall"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"Mvalue-funcall"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 9 #"func-name"
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 9 #"func-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"do-interpret"
0 0 24 3 2 #" ("
0 0 14 3 11 #"getFuncBody"
0 0 24 3 1 #" "
0 0 14 3 8 #"function"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 77
(
 #"; replace the below with a call to the function closure's create-env"
 #" function"
) 0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 100
(
 #"; function in the closure should already pass the function name into"
 #" getFunctionExecutionEnvironment"
) 0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 37 #"; so that we don't have to do it here"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 31 #"getFunctionExecutionEnvironment"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 10 #"new-return"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 7 #"operand"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"break"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 8 #"continue"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"throw"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; getFunctionExecutionEnviroinment gets the execution environment fo"
 #"r a function call,"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; which includes everything available to the function through static"
 #" scoping along with"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #"; its parameters."
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; Assumes funcall is of format (funcall methodName actual-param-1 ac"
 #"tual-param-2 ...)"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Return looks like"
0 0 24 29 1 #"\n"
0 0 17 3 141
(
 #"; (((formal-param-names)(actual-param-values)) ((declaration-scope-s"
 #"ymbols)(declaration-scope-values)) ... ((global-symbols)(global-valu"
 #"es)))"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"getFunctionExecutionEnvironment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"funcall"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"bindParameters"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcall"
0 0 24 3 3 #") ("
0 0 14 3 10 #"param-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcall"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 33 #"getFunctionDeclarationEnvironment"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcall"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"param-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"cddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; Returns an environment with all bindings within the function's sco"
 #"pe - i.e.,"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; all bindings available in the layer it was declared and above. Doe"
 #"s not prepend"
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #"; an empty local scope. Based on static scoping."
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Return looks like:"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"; (((declaration-scope-symbols)(declaration-scope-values)) ... ((glo"
 #"bal-symbols)(global-values)))"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 33 #"getFunctionDeclarationEnvironment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"funName"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 20 #"env-contains-symbol?"
0 0 24 3 1 #" "
0 0 14 3 7 #"funName"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 33 #"getFunctionDeclarationEnvironment"
0 0 24 3 1 #" "
0 0 14 3 7 #"funName"
0 0 24 3 2 #" ("
0 0 14 3 10 #"nextLayers"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; Given the name of a function, the actual parameters being passed t"
 #"o the function,"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; and the environment from which the function was called, locate the"
 #" function closure"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; in env and bind the actual parameters to the function's formal par"
 #"ameters."
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Return looks like:"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; ((formal-param-names)(actual-param-values))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"bindParameters"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 12 #"actualParams"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"bindActualToFormal"
0 0 24 3 2 #" ("
0 0 14 3 24 #"getParamsFromEnvironment"
0 0 24 3 1 #" "
0 0 14 3 8 #"funcName"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 12 #"actualParams"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"(()()) "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; Returns the list of formal parameters as stored in the function cl"
 #"osure in the environment."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"getParamsFromEnvironment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"funName"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 7 #"funName"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; Recursively bind the actual parameters to the formal parameters."
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; Accepts the environment from which the function is being called an"
 #"d localEnv, which should"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #"; be '(()()) on the first call."
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Not a great name but... meh"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"bindActualToFormal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"formalParams"
0 0 24 3 1 #" "
0 0 14 3 12 #"actualParams"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"localEnv"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 84
(
 #"; If we've reached the end of the formal or actual param list but no"
 #"t the other, the"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 86
(
 #"; function was not called with the correct number of parameters and "
 #"we throw an error."
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"formalParams"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"actualParams"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"methodSignature"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"too"
0 0 19 3 1 #" "
0 0 19 3 4 #"many"
0 0 19 3 11 #" parameters"
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"formalParams"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"actualParams"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"methodSignature"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"too"
0 0 19 3 1 #" "
0 0 19 3 3 #"few"
0 0 19 3 11 #" parameters"
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"formalParams"
0 0 24 3 2 #") "
0 0 14 3 8 #"localEnv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"bindActualToFormal"
0 0 24 3 2 #" ("
0 0 14 3 12 #"restOfParams"
0 0 24 3 1 #" "
0 0 14 3 12 #"formalParams"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 17 #"restOfParamValues"
0 0 24 3 1 #" "
0 0 14 3 12 #"actualParams"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 12 #"currentLayer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 12 #"currentParam"
0 0 24 3 1 #" "
0 0 14 3 12 #"formalParams"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 17 #"currentParamValue"
0 0 24 3 1 #" "
0 0 14 3 12 #"actualParams"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 8 #"localEnv"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";helpers for bindActualToFormal"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"restOfParams"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"restOfParamValues"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentParam"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"currentParamValue"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Mbool: Evaluate a statement for a truth value of true or false."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"Mbool"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comparator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comparator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comparator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comparator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comparator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"=="
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comparator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"!="
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"comparator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Mvalue"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Mbool"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Mbool"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Mbool"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Mbool"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"!"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Mbool"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"invalidInput"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"This"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 1 #" "
0 0 19 3 6 #"cannot"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 9 #"evaluated"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 7 #"boolean"
0 0 19 3 6 #" value"
0 0 19 3 1 #"\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"comparator"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; HELPER METHODS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"lookup"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"unknown"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Symbol"
0 0 19 3 1 #" "
0 0 19 3 2 #"~a"
0 0 19 3 1 #" "
0 0 19 3 4 #"does"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 6 #" exist"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 20 #"env-contains-symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"lookupVal"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 12 #"currentLayer"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 10 #"nextLayers"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"lookupVal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable1"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 11 #"valueOfVar1"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lookupVal"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"restOfVars"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"restOfValues"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 9 #"())))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";helpers for lookup"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"nextLayers"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"currentLayer"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"variableList"
0 0 24 3 1 #" "
0 0 14 3 4 #"caar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; remove removes a variable from the state"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; it takes the variable name and the state and removes it from the s"
 #"tate"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"replace_var"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"out-of-scope"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Symbol"
0 0 19 3 1 #" "
0 0 19 3 2 #"~a"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"out"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 5 #"scope"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 4 #"does"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 6 #"exist\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 20 #"env-contains-symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get_replaced"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 12 #"currentLayer"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"nextLayers"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"currentLayer"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 11 #"replace_var"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 10 #"nextLayers"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"get_replaced"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable1"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 10 #"restOfVars"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 24 3 2 #" ("
0 0 14 3 11 #"valueOfVar1"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 11 #"valueOfVar1"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"restOfValues"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"currentLayer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable1"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 11 #"valueOfVar1"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get_replaced"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"restOfVars"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"restOfValues"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))) "
0 0 21 3 1 #"'"
0 0 24 3 9 #"())))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";insert inerts a variable into the state, if the value already exist"
 #"s it replaces it"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";returns the state with a given variable and value added in"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"insert"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 13 #"valuesInState"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 6 #"())) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";createClosure creates a closure functon that will be added to the s"
 #"tate"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";the thirsd part of the cosure is the framework for the environment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"createClosure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 31 #"getFunctionExecutionEnvironment"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";stateContains? checks if the variable has already been declared in "
 #"the state"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"stateContains"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 20 #"env-contains-symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stateContains"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 10 #"nextLayers"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"env-contains-symbol?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 7 #"varList"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"varList"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"var1"
0 0 24 3 1 #" "
0 0 14 3 7 #"varList"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 20 #"env-contains-symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"varList"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";helper for state contains"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"var1"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"resOfVariablesInState"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";adds a level of scope to the given state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"addLevelOfScope"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"(()()) "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";remove the outer most level of scope"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"getInnerScope"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";gets the code inside the braces"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"insideBraces"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";variables in the state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 4 #"caar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";values in the state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"valuesInState"
0 0 24 3 1 #" "
0 0 14 3 5 #"cadar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";outerLevelVariables gets the variables in the outer most scope"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"outerLevelVariables"
0 0 24 3 1 #" "
0 0 14 3 4 #"caar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";outerLevelValues gets the values in the outer most scope"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"outerLevelValues"
0 0 24 3 1 #" "
0 0 14 3 5 #"cadar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";secondLevelVariables gets the variables in the outer most scope"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"secondLevelVariables"
0 0 24 3 1 #" "
0 0 14 3 5 #"caadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";secondLevelValues gets the values in the outer most scope"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"secondLevelValues"
0 0 24 3 1 #" "
0 0 14 3 6 #"cadadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";gets the first variable in the state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"variable1"
0 0 24 3 1 #" "
0 0 14 3 4 #"caar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";gets the value associated with the first variable in the state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"valueOfVar1"
0 0 24 3 1 #" "
0 0 14 3 5 #"caadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";rest of the variables in the state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"restOfVars"
0 0 24 3 1 #" "
0 0 14 3 4 #"cdar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";rest of the values in the state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"restOfValues"
0 0 24 3 1 #" "
0 0 14 3 5 #"cdadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";get the values in the state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"allValues"
0 0 24 3 1 #" "
0 0 14 3 5 #"cadar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";the expression in the stat of the program"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"firstExpression"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";the rest of the expressions in the programs"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"restOfExpressions"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";action"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"action"
0 0 24 3 1 #" "
0 0 14 3 4 #"caar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";the expression being returned"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"cdar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";variable"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";third element"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"thirdElement"
0 0 24 3 1 #" "
0 0 14 3 4 #"cddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";operation"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"operation"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0
